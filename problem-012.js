// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

//outer loop, counting up to make triange numbers
  //checking number of divisors of that triange number
  //return first one to have over 500 divisors


function divisorsCount (triangleNum) {
  let count = 1
  // for loop from 1 - trinum/2
  for (let i = 1; i <= triangleNum/2; i++) {
    // if evenly divisible by current num
      //Increment count
    if (triangleNum % i == 0) {
      count += 1
      // console.log("triangleNum, divisor ", triangleNum, i)
    }
  }
  // console.log("count", count)
  return count
}

function triNumDivisor () {
  //track current triangle number
  //increment numbers
    // add num to triangleNum
    // check number of divisors
    //if number of devisors > 500
      //return triangle num

  let currentTriNum = 0
  for (let i = 1; i < 100000; i++) {
  // for (let i = 1; i < 1000000000; i++) {
    currentTriNum += i
    if (divisorsCount(currentTriNum) > 500) {
      console.log("Final Answer:", currentTriNum)
      return currentTriNum
    }
    // console.log(currentTriNum)
  }
  console.log("for loop max too small")
}

triNumDivisor()